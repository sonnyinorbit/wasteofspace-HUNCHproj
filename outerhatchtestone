#include <Servo.h>

Servo hatchServo;
const int servoPin = 9;
const int closedAngle = 0;
const int openAngle = 180;
const int startAngle = 180; // Start open
const int openTime = 2000;
const int holdTime = 2000;
const int stepDelay = 15;

void setup() {
  Serial.begin(9600);
  
  hatchServo.attach(servoPin);
  hatchServo.write(startAngle); // Set to open position immediately
  delay(1000); // Brief delay to reach position
  
  executeAirlockCycle();
  
  Serial.println("Airlock sequence complete.");
}

void loop() {
  // Nothing happens in loop
}

void executeAirlockCycle() {
  Serial.println("Closing hatch from 180° to 0°...");
  smoothMove(startAngle, closedAngle, openTime);
  
  Serial.println("Hatch closed - holding position...");
  delay(holdTime);
  
  Serial.println("Opening hatch back to 180°...");
  smoothMove(closedAngle, startAngle, openTime);
  
  Serial.println("Hatch open - detaching servo...");
  delay(1000);
  hatchServo.detach();
}

void smoothMove(int startAngle, int endAngle, int duration) {
  int totalSteps = duration / stepDelay;
  
  for (int step = 0; step <= totalSteps; step++) {
    float progress = (float)step / (float)totalSteps;
    float easedProgress = easeInOutCubic(progress);
    int currentAngle = startAngle + (int)((endAngle - startAngle) * easedProgress);
    
    hatchServo.write(currentAngle);
    delay(stepDelay);
  }
  
  hatchServo.write(endAngle);
}

float easeInOutCubic(float t) {
  if (t < 0.5) {
    return 4 * t * t * t;
  } else {
    float f = 2 * t - 2;
    return 1 + f * f * f / 2;
  }
}
