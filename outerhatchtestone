#include <Servo.h>

Servo hatchServo;
const int servoPin = 9;
const int closedAngle = 0;
const int openAngle = 180; // Force full 180°
const int startAngle = 180; // Start open instead of closed
const int openTime = 2000;
const int holdTime = 2000;
const int stepDelay = 15;

void setup() {
  Serial.begin(9600);
  
  hatchServo.attach(servoPin);
  
  Serial.println("Calibrating servo to 180° (open) position...");
  calibrateServo();
  
  executeAirlockCycle();
  
  Serial.println("Airlock sequence complete.");
}

void loop() {
  // Nothing happens in loop
}

void executeAirlockCycle() {
  Serial.println("Closing hatch from 180° to 0°...");
  smoothMove(startAngle, closedAngle, openTime);
  
  Serial.println("Hatch closed - holding position...");
  delay(holdTime);
  
  Serial.println("Opening hatch back to 180°...");
  smoothMove(closedAngle, startAngle, openTime);
  
  Serial.println("Hatch open - detaching servo...");
  delay(1000);
  hatchServo.detach(); // Important: detach to prevent overheating
}

void smoothMove(int startAngle, int endAngle, int duration) {
  int totalSteps = duration / stepDelay;
  
  for (int step = 0; step <= totalSteps; step++) {
    float progress = (float)step / (float)totalSteps;
    float easedProgress = easeInOutCubic(progress);
    int currentAngle = startAngle + (int)((endAngle - startAngle) * easedProgress);
    
    hatchServo.write(currentAngle);
    delay(stepDelay);
  }
  
  hatchServo.write(endAngle);
}

float easeInOutCubic(float t) {
  if (t < 0.5) {
    return 4 * t * t * t;
  } else {
    float f = 2 * t - 2;
    return 1 + f * f * f / 2;
  }
}

void calibrateServo() {
  // Force servo to 180° (open) in small increments to avoid jerking
  Serial.println("Moving to 180° in stages...");
  
  // Go to some middle position first, then sweep up to 180°
  hatchServo.write(90);
  delay(1000);
  
  // Slowly sweep to 180° to ensure we're actually there
  for (int angle = 90; angle <= startAngle; angle += 5) {
    hatchServo.write(angle);
    Serial.print("Calibrating: ");
    Serial.print(angle);
    Serial.println("°");
    delay(200);
  }
  
  // Final command to ensure we're at exactly 180°
  hatchServo.write(startAngle);
  delay(1000);
  
  Serial.println("Calibration complete - servo at 180° (open)");
  delay(500);
}
